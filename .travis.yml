# =============================================================================
# .travis.yml
# =============================================================================
# Nonlinear Optimization Algorithms Multilang. Version 0.1
# =============================================================================
# Nonlinear programming algorithms as the (un-)constrained minimization
# problems with the focus on their numerical expression using various
# programming languages.
#
# This is the configuration of the project characteristics
# used by the Travis CI (continuous integration) service
# to rebuild the project on every push and pull request.
# =============================================================================

%YAML 1.1
---

language: c

compiler:
    - gcc
#    - clang

sudo: required

before_install:
    - sudo apt-get update

    ##
    # Installing the GNU Fortran 95 compiler
    # to build FORTRAN 77 and Fortran 95 impls.
    - sudo apt-get install gfortran

script:
    ## TODO: Building all the packages under unconstrained-core.
    - cd nlp-unconstrained-core && ls -al

    ## TODO: Building all the packages for hooke-jeeves.
    - cd hooke-jeeves && ls -al

    ## Building the original Hooke and Jeeves alg as the K&R C impl.
    - cd __orig && ls -al
                && make clean
                && make clean
                && ls -al
                && make all
                && make all
                && ls -al
                && ls -al bin obj src
                && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Building the Hooke and Jeeves alg as the ANSI C (C89/90/95) impl.
    - cd c && ls -al
           && make clean
           && make clean
           && ls -al
           && make all
           && make all
           && ls -al
           && ls -al bin obj src
           && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Building the Hooke and Jeeves alg as the ISO C++ (C++98/03/11) impl.
    - cd cc && ls -al
            && make clean
            && make clean
            && ls -al
            && make all
            && make all
            && ls -al
            && ls -al bin obj src
            && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Building the Hooke and Jeeves alg as the Perl 5 impl.
    - cd perl && ls -al
              && make clean
              && make clean
              && ls -al
              && make all
              && make all
              && ls -al
              && ls -al bin lib src
              && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Building the Hooke and Jeeves alg as the JavaScript impl.
    - cd js && ls -al
            && make clean
            && make clean
            && ls -al
            && make all
            && make all
            && ls -al
            && ls -al bin lib src
            && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Building the Hooke and Jeeves alg as the Java impl.
    - cd java && ls -al
              && make clean
              && make clean
              && ls -al
              && make all
              && make all
              && ls -al
              && ls -al bin lib src
              && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Building the Hooke and Jeeves alg as the FORTRAN 77 impl.
    - cd f77 && ls -al
             && make clean
             && make clean
             && ls -al
             && make all
             && make all
             && ls -al
             && ls -al bin obj src
             && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

...

# =============================================================================
# vim:set nu:et:ts=4:sw=4:
# =============================================================================
